# This is the ultimate HAProxy 2.0 "Getting Started" config
# It demonstrates many of the features available which are now available
# While you may not need all of these things, this can serve
# as a reference for your own configurations.
# Have questions?  Check out our community Slack:
# https://slack.haproxy.org/

global 
  user root
  group root
  master-worker
  stats socket /run/haproxy.sock mode 600 level admin
  stats timeout 2m
  log stdout local0
  # master-worker required for `program` section
  # enable here or start with -Ws
  mworker-max-reloads 3
  # enable core dumps
  set-dumpable

defaults 
  mode http
  log global
  option httplog
  option redispatch
  timeout connect 5s
  timeout client 5s
  timeout server 5s

userlist api 
  user admin insecure-password dalong
  # user admin password $5$aVnIFECJ$2QYP64eTTXZ1grSjwwdoQxK/AP8kcOflEO1Q5fc.5aA

resolvers dns 
  hold nx 30s
  hold obsolete 30s
  hold other 30s
  hold refused 30s
  hold timeout 30s
  hold valid 10s
  timeout resolve 1s
  timeout retry 1s
  resolve_retries 3
  parse-resolv-conf

frontend demo_frontend 
  mode http
  maxconn 2000
  bind *:10080 name http
  default_backend dalongdemo

frontend fe_main 
  bind *:8080
  acl is_grpc_codename path /CodenameCreator/KeepGettingCodenames
  acl dynamic_hosts req.hdr(Host) api.local admin.local haproxy.com
  log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r cpu_calls:%[cpu_calls] cpu_ns_tot:%[cpu_ns_tot] cpu_ns_avg:%[cpu_ns_avg] lat_ns_tot:%[lat_ns_tot] lat_ns_avg:%[lat_ns_avg]"
  http-request deny deny_status 429 if { sc_http_req_rate(0) gt 10 }
  http-request capture var(txn.dstip) len 40 if dynamic_hosts
  use_backend be_503 if dynamic_hosts !{ var(txn.dstip) -m found }
  use_backend be_dynamic if dynamic_hosts
  use_backend be_grpc if is_grpc_codename
  default_backend be_main
  # Enable log sampling
  # One out of 10 requests would be logged to this source
  log 127.0.0.1:10001 sample 1:10 local0
  # For every 11 requests, log requests 2, 3, and 8-11
  log 127.0.0.1:10002 sample 2-3,8-11:11 local0
  # Log profiling data
  # gRPC path matching
  # Dynamic 'do-resolve' trusted hosts
  # Activate Traffic Mirror
  # Redirect if not SSL
  # http-request redirect scheme https unless { ssl_fc }
  # Enable src tracking
  # http-request track-sc0 src table mypeers/src_tracking
  # Enable rate limiting
  # Return 429 Too Many Requests if client averages more than
  # 10 requests in 10 seconds.
  # (duration defined in stick table in peers section)
  # Enable local resolving of Host if within dynamic_hosts ACL
  # Allows connecting to dynamic IP address specified in Host header
  # Useful for DNS split view or split horizon
  http-request do-resolve(txn.dstip,dns) hdr(Host),lower if dynamic_hosts
  # return 503 when dynamic_hosts matches but the variable
  # txn.dstip is not set which mean DNS resolution error
  # otherwise route to be_dynamic
  # route to gRPC path

frontend stats 
  bind *:8404
  stats enable
  stats uri /stats
  stats refresh 10s
  http-request use-service prometheus-exporter if { path /metrics }
  # Enable Prometheus Exporter

frontend test_frontend 
  mode http
  maxconn 2000
  bind *:10080 name http
  default_backend test_backend

backend be_503 
  # dummy backend used to return 503.
  # You can use the 'errorfile' directive to send a nice
  # 503 error page to end users.
  errorfile 503 /usr/local/etc/haproxy/errors/503.http

backend be_dynamic 
  default-server ssl verify none check maxconn 50
  http-request deny if { var(txn.dstip) -m ip 127.0.0.0/8 10.0.0.0/8 }
  server dynamic 0.0.0.0:0
  # rule to prevent HAProxy from reconnecting to services
  # on the local network (forged DNS name used to scan the network)
  http-request set-dst var(txn.dstip)

backend be_grpc 
  default-server ssl verify none alpn h2 check maxconn 50
  server grpc1 10.1.0.11:3000
  server grpc2 10.1.0.12:3000

backend be_main 
  balance random(2)
  server server1 nginx1:80 check inter 3s
  server server2 nginx2:80 check inter 3s
  retries 3
  # Enable Power of Two Random Choices Algorithm
  # Enable Layer 7 retries
  retry-on all-retryable-errors
  # retrying POST requests can be dangerous
  # make sure you understand the implications before removing
  http-request disable-l7-retry if METH_POST

backend dalongdemo 
  mode http
  balance roundrobin
  option httpchk HEAD /
  server server1 10.15.0.80:80 check maxconn 1000 weight 200

backend spoe-traffic-mirror 
  mode tcp
  balance roundrobin
  timeout server 1m
  timeout connect 5s
  server spoa1 127.0.0.1:12345
  server spoa2 10.1.0.20:12345

backend test_backend 
  mode http
  balance roundrobin
  option httpchk HEAD / HTTP/1.1
  server server1 192.168.0.104:8888 check maxconn 30 weight 100

program dataplane-api 
  command /usr/local/sbin/dataplaneapi --host 0.0.0.0 --port 5555 -b /usr/local/sbin/haproxy -c /usr/local/etc/haproxy/haproxy.cfg --reload-cmd "kill -SIGUSR2 1" --reload-delay 5 --userlist api
  no option start-on-reload
