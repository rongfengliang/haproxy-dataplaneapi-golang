// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Httpchk httpchk
//
// swagger:model httpchk
type Httpchk struct {

	// method
	// Enum: [HEAD PUT POST GET TRACE PATCH]
	Method string `json:"method,omitempty"`

	// uri
	// Pattern: ^[^\s]+$
	URI string `json:"uri,omitempty"`

	// version
	// Pattern: ^[^\s]+$
	Version string `json:"version,omitempty"`
}

// Validate validates this httpchk
func (m *Httpchk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var httpchkTypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HEAD","PUT","POST","GET","TRACE","PATCH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		httpchkTypeMethodPropEnum = append(httpchkTypeMethodPropEnum, v)
	}
}

const (

	// HttpchkMethodHEAD captures enum value "HEAD"
	HttpchkMethodHEAD string = "HEAD"

	// HttpchkMethodPUT captures enum value "PUT"
	HttpchkMethodPUT string = "PUT"

	// HttpchkMethodPOST captures enum value "POST"
	HttpchkMethodPOST string = "POST"

	// HttpchkMethodGET captures enum value "GET"
	HttpchkMethodGET string = "GET"

	// HttpchkMethodTRACE captures enum value "TRACE"
	HttpchkMethodTRACE string = "TRACE"

	// HttpchkMethodPATCH captures enum value "PATCH"
	HttpchkMethodPATCH string = "PATCH"
)

// prop value enum
func (m *Httpchk) validateMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, httpchkTypeMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Httpchk) validateMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.Method) { // not required
		return nil
	}

	// value enum
	if err := m.validateMethodEnum("method", "body", m.Method); err != nil {
		return err
	}

	return nil
}

func (m *Httpchk) validateURI(formats strfmt.Registry) error {

	if swag.IsZero(m.URI) { // not required
		return nil
	}

	if err := validate.Pattern("uri", "body", string(m.URI), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Httpchk) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.Pattern("version", "body", string(m.Version), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Httpchk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Httpchk) UnmarshalBinary(b []byte) error {
	var res Httpchk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
