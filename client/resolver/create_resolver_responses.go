// Code generated by go-swagger; DO NOT EDIT.

package resolver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/rongfengliang/haproxy-golang/models"
)

// CreateResolverReader is a Reader for the CreateResolver structure.
type CreateResolverReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateResolverReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateResolverCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCreateResolverAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateResolverBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateResolverConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateResolverDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateResolverCreated creates a CreateResolverCreated with default headers values
func NewCreateResolverCreated() *CreateResolverCreated {
	return &CreateResolverCreated{}
}

/*CreateResolverCreated handles this case with default header values.

Resolver created
*/
type CreateResolverCreated struct {
	Payload *models.Resolver
}

func (o *CreateResolverCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolverCreated  %+v", 201, o.Payload)
}

func (o *CreateResolverCreated) GetPayload() *models.Resolver {
	return o.Payload
}

func (o *CreateResolverCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Resolver)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResolverAccepted creates a CreateResolverAccepted with default headers values
func NewCreateResolverAccepted() *CreateResolverAccepted {
	return &CreateResolverAccepted{}
}

/*CreateResolverAccepted handles this case with default header values.

Configuration change accepted and reload requested
*/
type CreateResolverAccepted struct {
	/*ID of the requested reload
	 */
	ReloadID string

	Payload *models.Resolver
}

func (o *CreateResolverAccepted) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolverAccepted  %+v", 202, o.Payload)
}

func (o *CreateResolverAccepted) GetPayload() *models.Resolver {
	return o.Payload
}

func (o *CreateResolverAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Reload-ID
	o.ReloadID = response.GetHeader("Reload-ID")

	o.Payload = new(models.Resolver)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResolverBadRequest creates a CreateResolverBadRequest with default headers values
func NewCreateResolverBadRequest() *CreateResolverBadRequest {
	return &CreateResolverBadRequest{
		ConfigurationVersion: 0,
	}
}

/*CreateResolverBadRequest handles this case with default header values.

Bad request
*/
type CreateResolverBadRequest struct {
	/*Configuration file version
	 */
	ConfigurationVersion int64

	Payload *models.Error
}

func (o *CreateResolverBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolverBadRequest  %+v", 400, o.Payload)
}

func (o *CreateResolverBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateResolverBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	configurationVersion, err := swag.ConvertInt64(response.GetHeader("Configuration-Version"))
	if err != nil {
		return errors.InvalidType("Configuration-Version", "header", "int64", response.GetHeader("Configuration-Version"))
	}
	o.ConfigurationVersion = configurationVersion

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResolverConflict creates a CreateResolverConflict with default headers values
func NewCreateResolverConflict() *CreateResolverConflict {
	return &CreateResolverConflict{
		ConfigurationVersion: 0,
	}
}

/*CreateResolverConflict handles this case with default header values.

The specified resource already exists
*/
type CreateResolverConflict struct {
	/*Configuration file version
	 */
	ConfigurationVersion int64

	Payload *models.Error
}

func (o *CreateResolverConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolverConflict  %+v", 409, o.Payload)
}

func (o *CreateResolverConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateResolverConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	configurationVersion, err := swag.ConvertInt64(response.GetHeader("Configuration-Version"))
	if err != nil {
		return errors.InvalidType("Configuration-Version", "header", "int64", response.GetHeader("Configuration-Version"))
	}
	o.ConfigurationVersion = configurationVersion

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResolverDefault creates a CreateResolverDefault with default headers values
func NewCreateResolverDefault(code int) *CreateResolverDefault {
	return &CreateResolverDefault{
		_statusCode:          code,
		ConfigurationVersion: 0,
	}
}

/*CreateResolverDefault handles this case with default header values.

General Error
*/
type CreateResolverDefault struct {
	_statusCode int

	/*Configuration file version
	 */
	ConfigurationVersion int64

	Payload *models.Error
}

// Code gets the status code for the create resolver default response
func (o *CreateResolverDefault) Code() int {
	return o._statusCode
}

func (o *CreateResolverDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/resolvers][%d] createResolver default  %+v", o._statusCode, o.Payload)
}

func (o *CreateResolverDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateResolverDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	configurationVersion, err := swag.ConvertInt64(response.GetHeader("Configuration-Version"))
	if err != nil {
		return errors.InvalidType("Configuration-Version", "header", "int64", response.GetHeader("Configuration-Version"))
	}
	o.ConfigurationVersion = configurationVersion

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
