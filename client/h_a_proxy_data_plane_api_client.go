// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/rongfengliang/haproxy-golang/client/backend"
	"github.com/rongfengliang/haproxy-golang/client/bind"
	"github.com/rongfengliang/haproxy-golang/client/cluster"
	"github.com/rongfengliang/haproxy-golang/client/configuration"
	"github.com/rongfengliang/haproxy-golang/client/defaults"
	"github.com/rongfengliang/haproxy-golang/client/discovery"
	"github.com/rongfengliang/haproxy-golang/client/frontend"
	"github.com/rongfengliang/haproxy-golang/client/global"
	"github.com/rongfengliang/haproxy-golang/client/h_a_proxy_configuration_management"
	"github.com/rongfengliang/haproxy-golang/client/information"
	"github.com/rongfengliang/haproxy-golang/client/maps"
	"github.com/rongfengliang/haproxy-golang/client/nameserver"
	"github.com/rongfengliang/haproxy-golang/client/peer"
	"github.com/rongfengliang/haproxy-golang/client/peer_entry"
	"github.com/rongfengliang/haproxy-golang/client/reloads"
	"github.com/rongfengliang/haproxy-golang/client/resolver"
	"github.com/rongfengliang/haproxy-golang/client/server"
	"github.com/rongfengliang/haproxy-golang/client/sites"
	"github.com/rongfengliang/haproxy-golang/client/specification"
	"github.com/rongfengliang/haproxy-golang/client/specification_openapiv3"
	"github.com/rongfengliang/haproxy-golang/client/stats"
	"github.com/rongfengliang/haproxy-golang/client/stick_table"
	"github.com/rongfengliang/haproxy-golang/client/transactions"
)

// Default h a proxy data plane API HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/v2"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new h a proxy data plane API HTTP client.
func NewHTTPClient(formats strfmt.Registry) *HAProxyDataPlaneAPI {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new h a proxy data plane API HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *HAProxyDataPlaneAPI {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new h a proxy data plane API client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *HAProxyDataPlaneAPI {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(HAProxyDataPlaneAPI)
	cli.Transport = transport
	cli.Backend = backend.New(transport, formats)
	cli.Bind = bind.New(transport, formats)
	cli.Cluster = cluster.New(transport, formats)
	cli.Configuration = configuration.New(transport, formats)
	cli.Defaults = defaults.New(transport, formats)
	cli.Discovery = discovery.New(transport, formats)
	cli.Frontend = frontend.New(transport, formats)
	cli.Global = global.New(transport, formats)
	cli.HaProxyConfigurationManagement = h_a_proxy_configuration_management.New(transport, formats)
	cli.Information = information.New(transport, formats)
	cli.Maps = maps.New(transport, formats)
	cli.Nameserver = nameserver.New(transport, formats)
	cli.Peer = peer.New(transport, formats)
	cli.PeerEntry = peer_entry.New(transport, formats)
	cli.Reloads = reloads.New(transport, formats)
	cli.Resolver = resolver.New(transport, formats)
	cli.Server = server.New(transport, formats)
	cli.Sites = sites.New(transport, formats)
	cli.Specification = specification.New(transport, formats)
	cli.SpecificationOpenapiv3 = specification_openapiv3.New(transport, formats)
	cli.Stats = stats.New(transport, formats)
	cli.StickTable = stick_table.New(transport, formats)
	cli.Transactions = transactions.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// HAProxyDataPlaneAPI is a client for h a proxy data plane API
type HAProxyDataPlaneAPI struct {
	Backend backend.ClientService

	Bind bind.ClientService

	Cluster cluster.ClientService

	Configuration configuration.ClientService

	Defaults defaults.ClientService

	Discovery discovery.ClientService

	Frontend frontend.ClientService

	Global global.ClientService

	HaProxyConfigurationManagement h_a_proxy_configuration_management.ClientService

	Information information.ClientService

	Maps maps.ClientService

	Nameserver nameserver.ClientService

	Peer peer.ClientService

	PeerEntry peer_entry.ClientService

	Reloads reloads.ClientService

	Resolver resolver.ClientService

	Server server.ClientService

	Sites sites.ClientService

	Specification specification.ClientService

	SpecificationOpenapiv3 specification_openapiv3.ClientService

	Stats stats.ClientService

	StickTable stick_table.ClientService

	Transactions transactions.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *HAProxyDataPlaneAPI) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Backend.SetTransport(transport)
	c.Bind.SetTransport(transport)
	c.Cluster.SetTransport(transport)
	c.Configuration.SetTransport(transport)
	c.Defaults.SetTransport(transport)
	c.Discovery.SetTransport(transport)
	c.Frontend.SetTransport(transport)
	c.Global.SetTransport(transport)
	c.HaProxyConfigurationManagement.SetTransport(transport)
	c.Information.SetTransport(transport)
	c.Maps.SetTransport(transport)
	c.Nameserver.SetTransport(transport)
	c.Peer.SetTransport(transport)
	c.PeerEntry.SetTransport(transport)
	c.Reloads.SetTransport(transport)
	c.Resolver.SetTransport(transport)
	c.Server.SetTransport(transport)
	c.Sites.SetTransport(transport)
	c.Specification.SetTransport(transport)
	c.SpecificationOpenapiv3.SetTransport(transport)
	c.Stats.SetTransport(transport)
	c.StickTable.SetTransport(transport)
	c.Transactions.SetTransport(transport)
}
