// Code generated by go-swagger; DO NOT EDIT.

package h_a_proxy_configuration_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/rongfengliang/haproxy-golang/models"
)

// CreateStickRuleReader is a Reader for the CreateStickRule structure.
type CreateStickRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateStickRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateStickRuleCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCreateStickRuleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateStickRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateStickRuleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateStickRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateStickRuleCreated creates a CreateStickRuleCreated with default headers values
func NewCreateStickRuleCreated() *CreateStickRuleCreated {
	return &CreateStickRuleCreated{}
}

/*CreateStickRuleCreated handles this case with default header values.

Stick Rule created
*/
type CreateStickRuleCreated struct {
	Payload *models.StickRule
}

func (o *CreateStickRuleCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/stick_rules][%d] createStickRuleCreated  %+v", 201, o.Payload)
}

func (o *CreateStickRuleCreated) GetPayload() *models.StickRule {
	return o.Payload
}

func (o *CreateStickRuleCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StickRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateStickRuleAccepted creates a CreateStickRuleAccepted with default headers values
func NewCreateStickRuleAccepted() *CreateStickRuleAccepted {
	return &CreateStickRuleAccepted{}
}

/*CreateStickRuleAccepted handles this case with default header values.

Configuration change accepted and reload requested
*/
type CreateStickRuleAccepted struct {
	/*ID of the requested reload
	 */
	ReloadID string

	Payload *models.StickRule
}

func (o *CreateStickRuleAccepted) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/stick_rules][%d] createStickRuleAccepted  %+v", 202, o.Payload)
}

func (o *CreateStickRuleAccepted) GetPayload() *models.StickRule {
	return o.Payload
}

func (o *CreateStickRuleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Reload-ID
	o.ReloadID = response.GetHeader("Reload-ID")

	o.Payload = new(models.StickRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateStickRuleBadRequest creates a CreateStickRuleBadRequest with default headers values
func NewCreateStickRuleBadRequest() *CreateStickRuleBadRequest {
	return &CreateStickRuleBadRequest{
		ConfigurationVersion: 0,
	}
}

/*CreateStickRuleBadRequest handles this case with default header values.

Bad request
*/
type CreateStickRuleBadRequest struct {
	/*Configuration file version
	 */
	ConfigurationVersion int64

	Payload *models.Error
}

func (o *CreateStickRuleBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/stick_rules][%d] createStickRuleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateStickRuleBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateStickRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	configurationVersion, err := swag.ConvertInt64(response.GetHeader("Configuration-Version"))
	if err != nil {
		return errors.InvalidType("Configuration-Version", "header", "int64", response.GetHeader("Configuration-Version"))
	}
	o.ConfigurationVersion = configurationVersion

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateStickRuleConflict creates a CreateStickRuleConflict with default headers values
func NewCreateStickRuleConflict() *CreateStickRuleConflict {
	return &CreateStickRuleConflict{
		ConfigurationVersion: 0,
	}
}

/*CreateStickRuleConflict handles this case with default header values.

The specified resource already exists
*/
type CreateStickRuleConflict struct {
	/*Configuration file version
	 */
	ConfigurationVersion int64

	Payload *models.Error
}

func (o *CreateStickRuleConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/stick_rules][%d] createStickRuleConflict  %+v", 409, o.Payload)
}

func (o *CreateStickRuleConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateStickRuleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	configurationVersion, err := swag.ConvertInt64(response.GetHeader("Configuration-Version"))
	if err != nil {
		return errors.InvalidType("Configuration-Version", "header", "int64", response.GetHeader("Configuration-Version"))
	}
	o.ConfigurationVersion = configurationVersion

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateStickRuleDefault creates a CreateStickRuleDefault with default headers values
func NewCreateStickRuleDefault(code int) *CreateStickRuleDefault {
	return &CreateStickRuleDefault{
		_statusCode:          code,
		ConfigurationVersion: 0,
	}
}

/*CreateStickRuleDefault handles this case with default header values.

General Error
*/
type CreateStickRuleDefault struct {
	_statusCode int

	/*Configuration file version
	 */
	ConfigurationVersion int64

	Payload *models.Error
}

// Code gets the status code for the create stick rule default response
func (o *CreateStickRuleDefault) Code() int {
	return o._statusCode
}

func (o *CreateStickRuleDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/stick_rules][%d] createStickRule default  %+v", o._statusCode, o.Payload)
}

func (o *CreateStickRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateStickRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	configurationVersion, err := swag.ConvertInt64(response.GetHeader("Configuration-Version"))
	if err != nil {
		return errors.InvalidType("Configuration-Version", "header", "int64", response.GetHeader("Configuration-Version"))
	}
	o.ConfigurationVersion = configurationVersion

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
