// Code generated by go-swagger; DO NOT EDIT.

package h_a_proxy_configuration_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/rongfengliang/haproxy-golang/models"
)

// CreateACLReader is a Reader for the CreateACL structure.
type CreateACLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateACLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateACLCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCreateACLAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateACLBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateACLConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateACLDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateACLCreated creates a CreateACLCreated with default headers values
func NewCreateACLCreated() *CreateACLCreated {
	return &CreateACLCreated{}
}

/*CreateACLCreated handles this case with default header values.

ACL line created
*/
type CreateACLCreated struct {
	Payload *models.ACL
}

func (o *CreateACLCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/acls][%d] createAclCreated  %+v", 201, o.Payload)
}

func (o *CreateACLCreated) GetPayload() *models.ACL {
	return o.Payload
}

func (o *CreateACLCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ACL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateACLAccepted creates a CreateACLAccepted with default headers values
func NewCreateACLAccepted() *CreateACLAccepted {
	return &CreateACLAccepted{}
}

/*CreateACLAccepted handles this case with default header values.

Configuration change accepted and reload requested
*/
type CreateACLAccepted struct {
	/*ID of the requested reload
	 */
	ReloadID string

	Payload *models.ACL
}

func (o *CreateACLAccepted) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/acls][%d] createAclAccepted  %+v", 202, o.Payload)
}

func (o *CreateACLAccepted) GetPayload() *models.ACL {
	return o.Payload
}

func (o *CreateACLAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Reload-ID
	o.ReloadID = response.GetHeader("Reload-ID")

	o.Payload = new(models.ACL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateACLBadRequest creates a CreateACLBadRequest with default headers values
func NewCreateACLBadRequest() *CreateACLBadRequest {
	return &CreateACLBadRequest{
		ConfigurationVersion: 0,
	}
}

/*CreateACLBadRequest handles this case with default header values.

Bad request
*/
type CreateACLBadRequest struct {
	/*Configuration file version
	 */
	ConfigurationVersion int64

	Payload *models.Error
}

func (o *CreateACLBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/acls][%d] createAclBadRequest  %+v", 400, o.Payload)
}

func (o *CreateACLBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateACLBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	configurationVersion, err := swag.ConvertInt64(response.GetHeader("Configuration-Version"))
	if err != nil {
		return errors.InvalidType("Configuration-Version", "header", "int64", response.GetHeader("Configuration-Version"))
	}
	o.ConfigurationVersion = configurationVersion

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateACLConflict creates a CreateACLConflict with default headers values
func NewCreateACLConflict() *CreateACLConflict {
	return &CreateACLConflict{
		ConfigurationVersion: 0,
	}
}

/*CreateACLConflict handles this case with default header values.

The specified resource already exists
*/
type CreateACLConflict struct {
	/*Configuration file version
	 */
	ConfigurationVersion int64

	Payload *models.Error
}

func (o *CreateACLConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/acls][%d] createAclConflict  %+v", 409, o.Payload)
}

func (o *CreateACLConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateACLConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	configurationVersion, err := swag.ConvertInt64(response.GetHeader("Configuration-Version"))
	if err != nil {
		return errors.InvalidType("Configuration-Version", "header", "int64", response.GetHeader("Configuration-Version"))
	}
	o.ConfigurationVersion = configurationVersion

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateACLDefault creates a CreateACLDefault with default headers values
func NewCreateACLDefault(code int) *CreateACLDefault {
	return &CreateACLDefault{
		_statusCode:          code,
		ConfigurationVersion: 0,
	}
}

/*CreateACLDefault handles this case with default header values.

General Error
*/
type CreateACLDefault struct {
	_statusCode int

	/*Configuration file version
	 */
	ConfigurationVersion int64

	Payload *models.Error
}

// Code gets the status code for the create Acl default response
func (o *CreateACLDefault) Code() int {
	return o._statusCode
}

func (o *CreateACLDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/acls][%d] createAcl default  %+v", o._statusCode, o.Payload)
}

func (o *CreateACLDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateACLDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	configurationVersion, err := swag.ConvertInt64(response.GetHeader("Configuration-Version"))
	if err != nil {
		return errors.InvalidType("Configuration-Version", "header", "int64", response.GetHeader("Configuration-Version"))
	}
	o.ConfigurationVersion = configurationVersion

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
