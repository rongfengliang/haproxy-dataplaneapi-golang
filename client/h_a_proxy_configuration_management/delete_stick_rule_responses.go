// Code generated by go-swagger; DO NOT EDIT.

package h_a_proxy_configuration_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/rongfengliang/haproxy-golang/models"
)

// DeleteStickRuleReader is a Reader for the DeleteStickRule structure.
type DeleteStickRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteStickRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeleteStickRuleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteStickRuleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteStickRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteStickRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteStickRuleAccepted creates a DeleteStickRuleAccepted with default headers values
func NewDeleteStickRuleAccepted() *DeleteStickRuleAccepted {
	return &DeleteStickRuleAccepted{}
}

/*DeleteStickRuleAccepted handles this case with default header values.

Configuration change accepted and reload requested
*/
type DeleteStickRuleAccepted struct {
	/*ID of the requested reload
	 */
	ReloadID string
}

func (o *DeleteStickRuleAccepted) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/stick_rules/{index}][%d] deleteStickRuleAccepted ", 202)
}

func (o *DeleteStickRuleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Reload-ID
	o.ReloadID = response.GetHeader("Reload-ID")

	return nil
}

// NewDeleteStickRuleNoContent creates a DeleteStickRuleNoContent with default headers values
func NewDeleteStickRuleNoContent() *DeleteStickRuleNoContent {
	return &DeleteStickRuleNoContent{}
}

/*DeleteStickRuleNoContent handles this case with default header values.

Stick Rule deleted
*/
type DeleteStickRuleNoContent struct {
}

func (o *DeleteStickRuleNoContent) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/stick_rules/{index}][%d] deleteStickRuleNoContent ", 204)
}

func (o *DeleteStickRuleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteStickRuleNotFound creates a DeleteStickRuleNotFound with default headers values
func NewDeleteStickRuleNotFound() *DeleteStickRuleNotFound {
	return &DeleteStickRuleNotFound{
		ConfigurationVersion: 0,
	}
}

/*DeleteStickRuleNotFound handles this case with default header values.

The specified resource was not found
*/
type DeleteStickRuleNotFound struct {
	/*Configuration file version
	 */
	ConfigurationVersion int64

	Payload *models.Error
}

func (o *DeleteStickRuleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/stick_rules/{index}][%d] deleteStickRuleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteStickRuleNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteStickRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	configurationVersion, err := swag.ConvertInt64(response.GetHeader("Configuration-Version"))
	if err != nil {
		return errors.InvalidType("Configuration-Version", "header", "int64", response.GetHeader("Configuration-Version"))
	}
	o.ConfigurationVersion = configurationVersion

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteStickRuleDefault creates a DeleteStickRuleDefault with default headers values
func NewDeleteStickRuleDefault(code int) *DeleteStickRuleDefault {
	return &DeleteStickRuleDefault{
		_statusCode:          code,
		ConfigurationVersion: 0,
	}
}

/*DeleteStickRuleDefault handles this case with default header values.

General Error
*/
type DeleteStickRuleDefault struct {
	_statusCode int

	/*Configuration file version
	 */
	ConfigurationVersion int64

	Payload *models.Error
}

// Code gets the status code for the delete stick rule default response
func (o *DeleteStickRuleDefault) Code() int {
	return o._statusCode
}

func (o *DeleteStickRuleDefault) Error() string {
	return fmt.Sprintf("[DELETE /services/haproxy/configuration/stick_rules/{index}][%d] deleteStickRule default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteStickRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteStickRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	configurationVersion, err := swag.ConvertInt64(response.GetHeader("Configuration-Version"))
	if err != nil {
		return errors.InvalidType("Configuration-Version", "header", "int64", response.GetHeader("Configuration-Version"))
	}
	o.ConfigurationVersion = configurationVersion

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
